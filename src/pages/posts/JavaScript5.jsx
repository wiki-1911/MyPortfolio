import React from "react";

export default function JavaScript5() {
  return (
    <div className="p-8 max-w-4xl mx-auto text-gray-800 leading-relaxed font-sans">
      <h1 className="text-4xl font-extrabold text-blue-900 mb-6 text-center">
        X·ª≠ L√Ω B·∫•t ƒê·ªìng B·ªô trong JavaScript: Promise & Async/Await
      </h1>

      <p className="mb-6 text-lg">
        JavaScript l√† ng√¥n ng·ªØ ƒë∆°n lu·ªìng, nh∆∞ng ƒë·ª´ng lo! V·ªõi{" "}
        <strong>Promise</strong> v√† <strong>async/await</strong>, b·∫°n c√≥ th·ªÉ x·ª≠ l√Ω
        nhi·ªÅu t√°c v·ª• b·∫•t ƒë·ªìng b·ªô nh∆∞ t·∫£i d·ªØ li·ªáu hay ch·ªù ph·∫£n h·ªìi t·ª´ API m·ªôt c√°ch
        m∆∞·ª£t m√†. Trong b√†i n√†y, ch√∫ng ta s·∫Ω kh√°m ph√° c√°ch l√†m ch·ªß b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ
        vi·∫øt m√£ s·∫°ch v√† hi·ªáu qu·∫£!
      </p>

      <h2 className="text-2xl font-semibold text-blue-700 mt-8 mb-4">
        M·ª•c ti√™u b√†i h·ªçc
      </h2>
      <ul className="list-disc list-inside mb-6 text-gray-700">
        <li>Hi·ªÉu kh√°i ni·ªám b·∫•t ƒë·ªìng b·ªô v√† t·∫°i sao n√≥ quan tr·ªçng.</li>
        <li>
          N·∫Øm v·ªØng c√°ch s·ª≠ d·ª•ng <code>Promise</code> ƒë·ªÉ x·ª≠ l√Ω t√°c v·ª• b·∫•t ƒë·ªìng b·ªô.
        </li>
        <li>
          L√†m quen v·ªõi c√∫ ph√°p <code>async/await</code> ƒë·ªÉ vi·∫øt m√£ d·ªÖ ƒë·ªçc h∆°n.
        </li>
      </ul>

      <h2 className="text-2xl font-semibold text-blue-700 mt-8 mb-4">
        1. Promise c∆° b·∫£n
      </h2>
      <p className="mb-4">
        <code>Promise</code> l√† m·ªôt ƒë·ªëi t∆∞·ª£ng ƒë·∫°i di·ªán cho k·∫øt qu·∫£ c·ªßa m·ªôt t√°c v·ª•
        b·∫•t ƒë·ªìng b·ªô, c√≥ th·ªÉ th√†nh c√¥ng ho·∫∑c th·∫•t b·∫°i. N√≥ gi√∫p tr√°nh ‚Äúcallback
        hell‚Äù v√† l√†m m√£ r√µ r√†ng h∆°n.
      </p>

      <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto mb-6 font-mono text-sm">
        <code>{`const promise = new Promise((resolve, reject) => {
  setTimeout(() => resolve("Th√†nh c√¥ng!"), 2000);
});

promise.then(result => console.log(result)); // Output sau 2 gi√¢y: Th√†nh c√¥ng!`}</code>
      </pre>

      <p className="mb-4">Promise c√≥ ba tr·∫°ng th√°i:</p>
      <ul className="list-disc list-inside mb-6 text-gray-700">
        <li>
          <code>pending</code>: ƒêang ch·ªù x·ª≠ l√Ω.
        </li>
        <li>
          <code>fulfilled</code>: Ho√†n th√†nh th√†nh c√¥ng.
        </li>
        <li>
          <code>rejected</code>: Th·∫•t b·∫°i.
        </li>
      </ul>

      <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-lg mb-6">
        üí° <strong>M·∫πo:</strong> D√πng <code>.catch()</code> ƒë·ªÉ x·ª≠ l√Ω l·ªói trong
        Promise, v√≠ d·ª•: <code>promise.catch(err =&gt; console.log(err))</code>.
      </div>

      <h2 className="text-2xl font-semibold text-blue-700 mt-8 mb-4">
        2. Async/Await: C√∫ ph√°p hi·ªán ƒë·∫°i
      </h2>
      <p className="mb-4">
        <code>Async/await</code> l√† c√°ch vi·∫øt ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu h∆°n ƒë·ªÉ l√†m vi·ªác
        v·ªõi Promise, ƒë·∫∑c bi·ªát khi x·ª≠ l√Ω nhi·ªÅu t√°c v·ª• b·∫•t ƒë·ªìng b·ªô.
      </p>

      <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto mb-6 font-mono text-sm">
        <code>{`async function fetchData() {
  try {
    const data = await new Promise(resolve =>
      setTimeout(() => resolve("D·ªØ li·ªáu ƒë√£ t·∫£i!"), 2000)
    );
    console.log(data); // Output sau 2 gi√¢y: D·ªØ li·ªáu ƒë√£ t·∫£i!
  } catch (error) {
    console.log("L·ªói:", error);
  }
}

fetchData();`}</code>
      </pre>

      <p className="mb-6">
        - <code>async</code>: ƒê√°nh d·∫•u h√†m l√† b·∫•t ƒë·ªìng b·ªô.
        <br />- <code>await</code>: T·∫°m d·ª´ng ƒë·ªÉ ch·ªù Promise ho√†n th√†nh, ch·ªâ d√πng
        trong h√†m <code>async</code>.
        <br />- <code>try...catch</code>: X·ª≠ l√Ω l·ªói t∆∞∆°ng t·ª± <code>.catch()</code>{" "}
        c·ªßa Promise.
      </p>

      <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-lg mb-6">
        ‚ö†Ô∏è <strong>L∆∞u √Ω:</strong> Lu√¥n b·ªçc <code>await</code> trong{" "}
        <code>try...catch</code> ƒë·ªÉ x·ª≠ l√Ω l·ªói an to√†n!
      </div>

      <h2 className="text-2xl font-semibold text-blue-700 mb-4">
        T√≥m t·∫Øt ki·∫øn th·ª©c
      </h2>
      <ul className="list-disc list-inside mb-6 text-gray-700">
        <li>
          <code>Promise</code> gi√∫p x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô s·∫°ch s·∫Ω, thay th·∫ø callback
          l·ªìng nhau.
        </li>
        <li>
          <code>async/await</code> l√† c√∫ ph√°p hi·ªán ƒë·∫°i, gi√∫p m√£ d·ªÖ ƒë·ªçc nh∆∞ m√£ ƒë·ªìng
          b·ªô.
        </li>
        <li>
          S·ª≠ d·ª•ng <code>try...catch</code> ƒë·ªÉ x·ª≠ l√Ω l·ªói khi d√πng{" "}
          <code>async/await</code>.
        </li>
      </ul>

      <h2 className="text-2xl font-semibold text-blue-700 mb-4">
        T√†i nguy√™n h·ªçc th√™m
      </h2>
      <p className="mb-4">
        Mu·ªën l√†m ch·ªß b·∫•t ƒë·ªìng b·ªô trong JavaScript? H√£y kh√°m ph√°:
      </p>
      <ul className="list-disc list-inside mb-6 text-blue-600">
        <li>
          <a
            href="https://www.w3schools.com/js/js_async.asp"
            target="_blank"
            rel="noopener noreferrer"
            className="hover:underline"
          >
            W3Schools ‚Äì Async JavaScript
          </a>
        </li>
        <li>
          <a
            href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous"
            target="_blank"
            rel="noopener noreferrer"
            className="hover:underline"
          >
            MDN ‚Äì Asynchronous JavaScript
          </a>
        </li>
      </ul>

      <p className="mt-8 text-center text-gray-600">
        B√†i vi·∫øt n√†y c√≥ gi√∫p b·∫°n hi·ªÉu r√µ h∆°n v·ªÅ b·∫•t ƒë·ªìng b·ªô? H√£y chia s·∫ª v√† ƒë·ªÉ l·∫°i
        b√¨nh lu·∫≠n ƒë·ªÉ m√¨nh ti·∫øp t·ª•c mang ƒë·∫øn nh·ªØng n·ªôi dung ch·∫•t l∆∞·ª£ng h∆°n nh√©!
      </p>
    </div>
  );
}
